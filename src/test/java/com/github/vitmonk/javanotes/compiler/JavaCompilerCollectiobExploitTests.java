package com.github.vitmonk.javanotes.compiler;

import org.junit.Test;

import java.util.ArrayList;
import java.util.List;

/**
 * Trick java compiler =).
 */
public class JavaCompilerCollectiobExploitTests {

    @Test
    public void testJavaCompilerForUnsafeOperations() {
        List<Apple> appleList = new ArrayList<>();
        appleList.add(new Apple());
        System.out.println(appleList);

        List<?> unknownList = (List<?>) appleList;

        List<Object> objectList = (List<Object>) unknownList;

        objectList.add(new Orange());
        // now the apple list has also an orange
        System.out.println(objectList);

        // compiler error: use of unchecked or unsafe operation
        // List<Apple> appleList2 = (List<Apple>) objectList;

        // compiled successfully
        List<Apple> appleList2 = castBack(objectList);
        System.out.println(appleList2);

        for (int index = 0; index < appleList2.size(); index++) {
            System.out.print("Try to access " + (index + 1) + " apple.");
            try {
                Apple apple =

                        appleList2.get(index);
                System.out.println(" And it was: " + apple);
            } catch (ClassCastException e) {
                System.out.println(" But it was not an apple! Got " + (Object) appleList2.get(index) + " !");
                System.out.println(e);
            }
        }
    }

    private List<Apple> castBack(List<?> objectList) {
        return (List<Apple>) objectList;
    }

    private class Apple {

    }

    private class Orange {

    }
}
